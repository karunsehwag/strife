syntax = "proto3";

package payment;

import "google/protobuf/empty.proto";  // âœ… Import Empty for GenerateTransactionID

// ðŸ”¹ Payment Gateway Service
service PaymentGateway {
    rpc RegisterClient (ClientInfo) returns (RegisterResponse);
    rpc AuthenticateClient (UserCredentials) returns (AuthResponse);
    rpc GenerateTransactionID (google.protobuf.Empty) returns (TransactionResponse);
    rpc ProcessPayment (PaymentRequest) returns (PaymentResponse);
    rpc ViewBalance (BalanceRequest) returns (BalanceResponse);
}

// ðŸ”¹ Bank Service for Interbank Transfers with 2PC
service BankService {
    rpc InterbankTransfer (BankTransferRequest) returns (BankTransferResponse);
    rpc PrepareTransaction (PrepareRequest) returns (PrepareResponse); // âœ… Phase 1: Prepare
    rpc CommitTransaction (CommitRequest) returns (CommitResponse); // âœ… Phase 2: Commit
    rpc AbortTransaction (AbortRequest) returns (AbortResponse); // âœ… Rollback
}

// ðŸ”¸ Client Registration Request
message ClientInfo {
    string username = 1;
    string password = 2;
    string bank_name = 3;  // âœ… Ensure bank_name is required
}

// ðŸ”¸ Response for Client Registration
message RegisterResponse {
    bool success = 1;
    string message = 2;
}

// ðŸ”¸ User Authentication Request
message UserCredentials {
    string username = 1;
    string password = 2;
}

// ðŸ”¸ Response for Authentication
message AuthResponse {
    bool success = 1;
    string token = 2;
}

// ðŸ”¸ Generate Transaction ID Response
message TransactionResponse {
    string transaction_id = 1;
}

// ðŸ”¸ Payment Processing Request
message PaymentRequest {
    string sender = 1;
    string receiver = 2;
    double amount = 3;
    string transaction_id = 4;
}

// ðŸ”¸ Payment Response
message PaymentResponse {
    bool success = 1;
    string message = 2;
    string transaction_id = 3;
    string receiver = 4;
    string sender_bank = 5;  // âœ… Include sender bank
    string receiver_bank = 6; // âœ… Include receiver bank
}

// ðŸ”¸ Interbank Transfer Request
message BankTransferRequest {
    string sender = 1;
    string receiver = 2;
    double amount = 3;
    string transaction_id = 4;
}

// ðŸ”¸ Interbank Transfer Response
message BankTransferResponse {
    bool success = 1;
    string message = 2;
    string transaction_id = 3;
}

// ðŸ”¹ 2-Phase Commit Protocol Messages

// âœ… Phase 1: Prepare Request (Check if sender has enough balance)
message PrepareRequest {
    string sender = 1;
    string receiver = 2;
    double amount = 3;
    string transaction_id = 4;
}

// âœ… Phase 1: Prepare Response
message PrepareResponse {
    bool success = 1;
    string message = 2;
}

// âœ… Phase 2: Commit Request
message CommitRequest {
    string transaction_id = 1;
}

// âœ… Phase 2: Commit Response
message CommitResponse {
    bool success = 1;
    string message = 2;
}

// âœ… Abort Transaction Request
message AbortRequest {
    string transaction_id = 1;
}

// âœ… Abort Transaction Response
message AbortResponse {
    bool success = 1;
    string message = 2;
}

// ðŸ”¸ Balance Request
message BalanceRequest {
    string token = 1; // âœ… Authentication token
}

// ðŸ”¸ Balance Response (Now includes a success flag & message)
message BalanceResponse {
    bool success = 1;  // âœ… Added explicit success flag instead of relying on balance=-1
    double balance = 2;
    string message = 3; // âœ… Added message field for error handling
}

